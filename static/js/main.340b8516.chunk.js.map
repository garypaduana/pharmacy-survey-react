{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ALL_PASS","NA","props","survey","questions","rules","className","Survey","Algorithm","extractField","dep","responses","field","number","worker","undefined","operation","criteria","eval","includes","state","rule","dependsOn","filter","matchCriteria","every","errorMessage","messages","this","map","evaluation","evaluateRule","result","key","id","Evaluation","message","React","Component","currentQuestion","history","backHistory","nextEnabled","previousEnabled","onQuestionAnswered","bind","handleSubmit","goNext","goPrevious","resetButtons","milliseconds","Promise","resolve","setTimeout","response","question","find","setState","prevState","cleanDoubleResponses","event","alert","target","name","value","preventDefault","length","previous","slice","unshift","answer","nextQuestion","nextNumber","entry","RegExp","pattern","test","next","shift","nn","forEach","bh","content","Question","labels","validationError","onSubmit","type","onClick","disabled","JSON","stringify","handleEntry","option","text","handleDatePickerChange","date","handleSingleSelection","handleMultipleSelection","val","index","arr","push","parent","child","others","Object","keys","hasOwnProperty","optionsAlias","children","onChange","e","handleSingleThenMultiple","checked","inputOptions","responseType","questionForPatient","placeholderText","empty","maxDate","Date","isClearable","selected","options","generateChildren","generateInputOptions"],"mappings":"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","file":"static/js/main.340b8516.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport DatePicker from 'react-datepicker';\nimport questions from './questions-abbreviated.json';\nimport rules from './rules';\n\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport './App.css';\n\nconst ALL_PASS = \"ALL_PASS\";\nconst NA = \"NA\";\n\nfunction App() {\n  const props = {\n    survey: questions,\n    rules: rules\n  };\n\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Survey {...props}/>\n        </header>\n      </div>\n  );\n}\n\nclass Algorithm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  };\n\n  extractField = (dep, responses) => dep.field === \"$SELF\" ?\n      responses[dep.number] : responses[dep.number][dep.field];\n\n  worker = (dep, responses) => {\n    if (null === responses[dep.number] || undefined === responses[dep.number]) {\n      return false;\n    }\n    else if (dep.operation === \"equals\") {\n      return this.extractField(dep, responses) === dep.criteria;\n    }\n    else if (dep.operation === \"eval\") {\n      return eval(this.extractField(dep, responses) + dep.criteria);\n    }\n    else if (dep.operation === \"anyMatch\") {\n      return dep.criteria.includes(this.extractField(dep, responses));\n    }\n    else {\n      return false;\n    }\n  };\n\n  evaluateRule(rule, responses) {\n    let shouldRuleApply = rule.dependsOn\n        .filter((dep) => dep.matchCriteria)\n        .every((dep) => this.worker(dep, responses));\n\n    if (shouldRuleApply) {\n      let everyRuleSatisfied = rule.dependsOn\n          .every((dep) => this.worker(dep, responses));\n\n      if (everyRuleSatisfied) {\n        return ALL_PASS;\n      }\n      else {\n        return rule.errorMessage;\n      }\n    }\n    else {\n      return NA;\n    }\n  }\n\n  render() {\n    const messages = this.props.rules.map((rule) => {\n      let evaluation = this.evaluateRule(rule, this.props.responses);\n      let result = (<div/>);\n      if (evaluation !== NA && evaluation !== ALL_PASS) {\n        result = (<li key={rule.id}><Evaluation message={evaluation}/></li>);\n      }\n      return result;\n    });\n\n    return (\n        <div>\n          <div className=\"container\">\n            <h2>Evaluation</h2>\n              <ul>{messages}</ul>\n          </div>\n        </div>\n    );\n  }\n}\n\nclass Evaluation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    return (\n        <div>{this.props.message}</div>\n    );\n  }\n}\n\nclass Survey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuestion: \"0.1\",\n      responses: {},\n      history: [],\n      backHistory: [],\n      nextEnabled: true,\n      previousEnabled: true\n    };\n\n    this.onQuestionAnswered = this.onQuestionAnswered.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.goNext = this.goNext.bind(this);\n    this.goPrevious = this.goPrevious.bind(this);\n    this.resetButtons = this.resetButtons.bind(this);\n  }\n\n  sleep(milliseconds) {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  onQuestionAnswered(number, response) {\n    let question = this.props.survey.questions.find(question => question.number === number);\n\n    this.setState((prevState, props) => ({\n      responses: {\n        ...prevState.responses,\n        [number]: response\n      }\n    }));\n\n    this.cleanDoubleResponses(question, response);\n  }\n\n  handleSubmit(event) {\n    alert(\"name: \" + event.target.name + \"; value: \" + event.target.value);\n    event.preventDefault();\n  }\n\n  resetButtons() {\n    this.setState({\n      nextEnabled: true,\n      previousEnabled: true\n    });\n  }\n\n  goPrevious(event) {\n    if (this.state.history.length > 0) {\n      let previous = this.state.history.slice(this.state.history.length - 1, this.state.history.length);\n      if (previous.length === 0) {\n        previous = [\"1\"];\n      }\n      this.setState((prevState, props) => {\n        prevState.backHistory.unshift(prevState.currentQuestion);\n        return {\n          currentQuestion: previous[0],\n          backHistory: prevState.backHistory,\n          history: [...this.state.history.slice(0, this.state.history.length - 1)],\n          nextEnabled: true\n        }\n      });\n    } else {\n      this.setState({\n        previousEnabled: false,\n        nextEnabled: true\n      });\n    }\n  }\n\n  goNext(event) {\n    // Get the object of the current question\n    let question = this.props.survey.questions.find(question => question.number === this.state.currentQuestion);\n\n    // Figure out what the next question is based on the answer to the current question.\n    const answer = this.state.responses[this.state.currentQuestion]\n    let nextQuestion = question.nextNumber.find(entry => new RegExp(entry.pattern).test(answer));\n\n    if (null != nextQuestion) {\n      nextQuestion = nextQuestion.next;\n    }\n\n    if (\"END\" === nextQuestion) {\n      alert(\"You're at the end!\")\n\n    }\n\n    // Only advance to the next question if it exists based on the previous answer.\n    // Add the current question to the stack of history.\n    else if (this.props.survey.questions.find(question => question.number === nextQuestion)) {\n      this.setState((prevState, props) => {\n        prevState.backHistory.shift();\n        return {\n          currentQuestion: nextQuestion,\n          backHistory: prevState.backHistory,\n          history: [...this.state.history, question.number],\n          previousEnabled: true\n        }\n      });\n    } else {\n      this.setState({\n        nextEnabled: false,\n        previousEnabled: true\n      })\n    }\n  }\n\n  /**\n   * If question.nextNumber has mutually exclusive entries, delete the responses for the options that were not selected.\n   */\n  cleanDoubleResponses(question, response) {\n    // If there is the option to select anything then don't worry about it.\n    if (question.nextNumber.find(nn => nn.pattern === \".*\")) {\n      return\n    }\n    question.nextNumber\n        .filter(nn => !(new RegExp(nn.pattern).test(response)))\n        .forEach(nn => {\n          this.setState((prevState, props) => {\n            let responses = prevState.responses;\n            prevState.backHistory.forEach(bh => {\n              delete responses[bh];\n            });\n            return {\n              backHistory: [],\n              responses: responses\n            }\n          });\n        });\n  }\n\n  render() {\n    let question = this.props.survey.questions.find(question => question.number === this.state.currentQuestion);\n    let content = question ? <Question question={question}\n                                       labels={this.props.survey.labels}\n                                       response={this.state.responses[this.state.currentQuestion]}\n                                       onQuestionAnswered={this.onQuestionAnswered}\n                                       validationError={!this.state.nextEnabled}\n                                       resetButtons={this.resetButtons}/> :\n        <p>Question {this.state.currentQuestion} not found!</p>;\n\n    return (\n        <div>\n          <div className=\"container survey\">\n            <div className=\"header\"> Question \"{this.state.currentQuestion}\" of {this.props.survey.questions.length}</div>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"question\">{content}</div>\n            </form>\n            <button className=\"navigation\"\n                    type=\"submit\"\n                    name=\"button_previous\"\n                    onClick={this.goPrevious}\n                    disabled={!this.state.previousEnabled}>Previous\n            </button>\n            <button className=\"navigation\"\n                    type=\"submit\"\n                    name=\"button_next\"\n                    onClick={this.goNext}\n                    disabled={!this.state.nextEnabled}>Next\n            </button>\n            <br/>\n          </div>\n          <Algorithm responses={this.state.responses} rules={this.props.rules}/>\n          <pre className=\"code\">{JSON.stringify(this.state, null, 2)}</pre>\n        </div>\n    );\n  }\n}\n\nclass Question extends React.Component {\n\n  handleEntry = (option, event) => {\n    let response = this.props.response || {};\n\n    let text = event.target.value;\n    // if the free text length falls to zero, remove the \"other\" value from the response\n    if (text.length === 0) {\n      delete response[option];\n    }\n    else {\n      // otherwise put an object in there\n      response[option] = text;\n    }\n\n    this.props.onQuestionAnswered(this.props.question.number, response);\n    this.props.resetButtons();\n  };\n\n  handleDatePickerChange = date => {\n    this.props.onQuestionAnswered(this.props.question.number, date);\n    this.props.resetButtons();\n  };\n\n  handleSingleSelection = event => {\n    this.props.onQuestionAnswered(this.props.question.number, event.target.name);\n    this.props.resetButtons();\n  };\n\n  handleMultipleSelection = event => {\n    let response = this.props.response || [];\n    if (!response.includes(event.target.name)) {\n      response.push(event.target.name);\n    } else {\n      response = response.filter((val, index, arr) => val !== event.target.name);\n    }\n    this.props.onQuestionAnswered(this.props.question.number, response);\n    this.props.resetButtons();\n  };\n\n  handleSingleThenMultiple(parent, child, event) {\n    let response = this.props.response || {};\n    let others = new RegExp(\"Other.*\").test(child);\n\n    // Top level is mutually exclusive (i.e. radio buttons); reset the response if the top level changes\n    if (!Object.keys(response).includes(parent)) {\n      response = {};\n      response[parent] = {};\n    }\n\n    if (others) {\n      let text = event.target.value;\n      // if the free text length falls to zero, remove the \"other\" value from the response\n      if (text.length === 0) {\n        delete response[parent][child];\n      }\n      else {\n        // otherwise put an object in there\n        response[parent][child] = text;\n      }\n    }\n    else {\n      // if the child already exists, delete it (toggle off)\n      if (response[parent].hasOwnProperty(child)) {\n        delete response[parent][child];\n      } else if (!child) {\n        response[parent] = {};\n      } else {\n        response[parent][child] = null;\n      }\n    }\n\n    this.props.onQuestionAnswered(this.props.question.number, response);\n    this.props.resetButtons();\n  }\n\n  generateChildren(optionsAlias, parent) {\n    let children = <div/>;\n    if (this.props.response && this.props.response.hasOwnProperty(parent)) {\n      children = optionsAlias[parent].map((child) => {\n        let control;\n        if (new RegExp(\"Other.*\").test(child)) {\n          control = (<div className=\"child\">\n            {child} <input type=\"text\"\n                           name={child}\n                           key={parent + \".\" + child}\n                           value={this.props.response[parent][child]}\n                           onChange={(e) =>\n                               this.handleSingleThenMultiple(parent, child, e)}/>\n             <br/>\n             </div>);\n        }\n        else {\n          control = (<div className=\"child\">\n            <input type=\"checkbox\"\n                   name={child}\n                   key={parent + \".\" + child}\n                   checked={this.props.response && this.props.response[parent].hasOwnProperty(child)}\n                   onChange={(e) =>\n                       this.handleSingleThenMultiple(parent, child, e)}/> {child}\n          <br/>\n          </div>);\n        }\n        return control;\n      });\n    }\n    return children;\n  }\n\n  generateInputOptions(validationError) {\n    let inputOptions = <div/>;\n    let responseType = this.props.question.questionForPatient.responseType;\n    if (responseType === \"DATE_PICKER_OPTIONAL\") {\n      inputOptions = (\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            <DatePicker className=\"datePicker\"\n                        placeholderText={this.props.labels[responseType].empty}\n                        maxDate={new Date()}\n                        isClearable\n                        selected={this.props.response}\n                        onChange={this.handleDatePickerChange}/>\n          </div>\n      );\n    } else if (responseType === \"SINGLE_SELECTION\") {\n      inputOptions = this.props.question.questionForPatient.options.map((option) =>\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            <input type=\"radio\"\n                   name={option}\n                   key={option}\n                   checked={this.props.response === option}\n                   onChange={this.handleSingleSelection}/> {option}\n          </div>\n      );\n    } else if (responseType === \"MULTIPLE_SELECTION\") {\n      inputOptions = this.props.question.questionForPatient.options.map((option) =>\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            <input type=\"checkbox\"\n                   name={option}\n                   key={option}\n                   checked={this.props.response && this.props.response.includes(option)}\n                   onChange={this.handleMultipleSelection}/> {option}\n          </div>\n      );\n    } else if (responseType === \"SINGLE_SELECTION_THEN_MULTIPLE_SELECTION\") {\n      const optionsAlias = this.props.question.questionForPatient.options;\n\n      inputOptions = Object.keys(optionsAlias).map((option) =>\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            <input type=\"radio\"\n                   name={option}\n                   key={option}\n                   checked={this.props.response && this.props.response.hasOwnProperty(option)}\n                   onChange={(e) =>\n                       this.handleSingleThenMultiple(option, null, e)}/> {option}\n            <br/>\n            {this.generateChildren(optionsAlias, option)}\n          </div>\n      );\n    } else if (responseType === \"ENTRY\") {\n      inputOptions = this.props.question.questionForPatient.options.map((option) =>\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            {option} <input type=\"text\"\n                   name={option}\n                   key={option}\n                   value={this.props.response ? (this.props.response[option] || \"\") : \"\"}\n                   onChange={(e) =>\n                       this.handleEntry(option, e)} />\n          </div>\n      );\n    }\n    return <div className=\"inputOptions\">{inputOptions}</div>;\n  }\n\n  render() {\n    return (\n        <div>\n          <div className=\"questionText\">{this.props.question.questionForPatient.question}</div>\n          {this.generateInputOptions(this.props.validationError)}\n        </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}