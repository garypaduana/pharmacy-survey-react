{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Survey","props","state","currentQuestion","responses","history","backHistory","nextEnabled","previousEnabled","onQuestionAnswered","bind","handleSubmit","goNext","goPrevious","resetButtons","milliseconds","Promise","resolve","setTimeout","number","response","question","this","questions","find","setState","prevState","cleanDoubleResponses","event","alert","target","name","value","preventDefault","length","previous","slice","unshift","answer","nextQuestion","nextNumber","entry","RegExp","pattern","test","next","shift","nn","filter","forEach","bh","content","labels","validationError","className","onSubmit","type","onClick","disabled","JSON","stringify","React","Component","Question","handleEntry","option","text","handleDatePickerChange","date","handleSingleSelection","handleMultipleSelection","includes","val","index","arr","push","parent","child","others","Object","keys","hasOwnProperty","optionsAlias","children","map","key","onChange","e","handleSingleThenMultiple","checked","inputOptions","responseType","questionForPatient","placeholderText","empty","maxDate","Date","isClearable","selected","options","generateChildren","generateInputOptions","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4079c94a.chunk.js","sourcesContent":["import React from 'react';\nimport DatePicker from 'react-datepicker';\nimport questions from './questions-abbreviated.json';\n\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport './App.css';\n\nfunction App() {\n  const props = questions;\n\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Survey {...props}/>\n        </header>\n      </div>\n  );\n}\n\nclass Survey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuestion: \"1\",\n      responses: {},\n      history: [],\n      backHistory: [],\n      nextEnabled: true,\n      previousEnabled: true\n    };\n\n    this.onQuestionAnswered = this.onQuestionAnswered.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.goNext = this.goNext.bind(this);\n    this.goPrevious = this.goPrevious.bind(this);\n    this.resetButtons = this.resetButtons.bind(this);\n  }\n\n  sleep(milliseconds) {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  onQuestionAnswered(number, response) {\n    let question = this.props.questions.find(question => question.number === number);\n\n    this.setState((prevState, props) => ({\n      responses: {\n        ...prevState.responses,\n        [number]: response\n      }\n    }));\n\n    this.cleanDoubleResponses(question, response);\n  }\n\n  handleSubmit(event) {\n    alert(\"name: \" + event.target.name + \"; value: \" + event.target.value);\n    event.preventDefault();\n  }\n\n  resetButtons() {\n    this.setState({\n      nextEnabled: true,\n      previousEnabled: true\n    });\n  }\n\n  goPrevious(event) {\n    if (this.state.history.length > 0) {\n      let previous = this.state.history.slice(this.state.history.length - 1, this.state.history.length);\n      if (previous.length === 0) {\n        previous = [\"1\"];\n      }\n      this.setState((prevState, props) => {\n        prevState.backHistory.unshift(prevState.currentQuestion);\n        return {\n          currentQuestion: previous[0],\n          backHistory: prevState.backHistory,\n          history: [...this.state.history.slice(0, this.state.history.length - 1)],\n          nextEnabled: true\n        }\n      });\n    } else {\n      this.setState({\n        previousEnabled: false,\n        nextEnabled: true\n      });\n    }\n  }\n\n  goNext(event) {\n    // Get the object of the current question\n    let question = this.props.questions.find(question => question.number === this.state.currentQuestion);\n\n    // Figure out what the next question is based on the answer to the current question.\n    const answer = this.state.responses[this.state.currentQuestion]\n    let nextQuestion = question.nextNumber.find(entry => new RegExp(entry.pattern).test(answer));\n\n    if (null != nextQuestion) {\n      nextQuestion = nextQuestion.next;\n    }\n\n    // Only advance to the next question if it exists based on the previous answer.\n    // Add the current question to the stack of history.\n    if (null != nextQuestion && this.props.questions.find(question => question.number === nextQuestion)) {\n      this.setState((prevState, props) => {\n        prevState.backHistory.shift();\n        return {\n          currentQuestion: nextQuestion,\n          backHistory: prevState.backHistory,\n          history: [...this.state.history, question.number],\n          previousEnabled: true\n        }\n      });\n    } else {\n      this.setState({\n        nextEnabled: false,\n        previousEnabled: true\n      })\n    }\n  }\n\n  /**\n   * If question.nextNumber has mutually exclusive entries, delete the responses for the options that were not selected.\n   */\n  cleanDoubleResponses(question, response) {\n    // If there is the option to select anything then don't worry about it.\n    if (question.nextNumber.find(nn => nn.pattern === \".*\")) {\n      return\n    }\n    question.nextNumber\n        .filter(nn => !(new RegExp(nn.pattern).test(response)))\n        .forEach(nn => {\n          this.setState((prevState, props) => {\n            let responses = prevState.responses;\n            prevState.backHistory.forEach(bh => {\n              delete responses[bh];\n            });\n            return {\n              backHistory: [],\n              responses: responses\n            }\n          });\n        });\n  }\n\n  render() {\n    let question = this.props.questions.find(question => question.number === this.state.currentQuestion);\n    let content = question ? <Question question={question}\n                                       labels={this.props.labels}\n                                       response={this.state.responses[this.state.currentQuestion]}\n                                       onQuestionAnswered={this.onQuestionAnswered}\n                                       validationError={!this.state.nextEnabled}\n                                       resetButtons={this.resetButtons}/> :\n        <p>Question {this.state.currentQuestion} not found!</p>;\n\n    return (\n        <div>\n          <div className=\"container survey\">\n            <div className=\"header\"> Question \"{this.state.currentQuestion}\" of {this.props.questions.length}</div>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"question\">{content}</div>\n            </form>\n            <button className=\"navigation\"\n                    type=\"submit\"\n                    name=\"button_previous\"\n                    onClick={this.goPrevious}\n                    disabled={!this.state.previousEnabled}>Previous\n            </button>\n            <button className=\"navigation\"\n                    type=\"submit\"\n                    name=\"button_next\"\n                    onClick={this.goNext}\n                    disabled={!this.state.nextEnabled}>Next\n            </button>\n            <br/>\n          </div>\n          <br/> <br/>\n          <pre className=\"code\">{JSON.stringify(this.state, null, 2)}</pre>\n        </div>\n    );\n  }\n}\n\nclass Question extends React.Component {\n\n  handleEntry = (option, event) => {\n    let response = this.props.response || {};\n\n    let text = event.target.value;\n    // if the free text length falls to zero, remove the \"other\" value from the response\n    if (text.length === 0) {\n      delete response[option];\n    }\n    else {\n      // otherwise put an object in there\n      response[option] = text;\n    }\n\n    this.props.onQuestionAnswered(this.props.question.number, response);\n    this.props.resetButtons();\n  };\n\n  handleDatePickerChange = date => {\n    this.props.onQuestionAnswered(this.props.question.number, date);\n    this.props.resetButtons();\n  };\n\n  handleSingleSelection = event => {\n    this.props.onQuestionAnswered(this.props.question.number, event.target.name);\n    this.props.resetButtons();\n  };\n\n  handleMultipleSelection = event => {\n    let response = this.props.response || [];\n    if (!response.includes(event.target.name)) {\n      response.push(event.target.name);\n    } else {\n      response = response.filter((val, index, arr) => val !== event.target.name);\n    }\n    this.props.onQuestionAnswered(this.props.question.number, response);\n    this.props.resetButtons();\n  };\n\n  handleSingleThenMultiple(parent, child, event) {\n    let response = this.props.response || {};\n    let others = new RegExp(\"Other.*\").test(child);\n\n    // Top level is mutually exclusive (i.e. radio buttons); reset the response if the top level changes\n    if (!Object.keys(response).includes(parent)) {\n      response = {};\n      response[parent] = {};\n    }\n\n    if (others) {\n      let text = event.target.value;\n      // if the free text length falls to zero, remove the \"other\" value from the response\n      if (text.length === 0) {\n        delete response[parent][child];\n      }\n      else {\n        // otherwise put an object in there\n        response[parent][child] = text;\n      }\n    }\n    else {\n      // if the child already exists, delete it (toggle off)\n      if (response[parent].hasOwnProperty(child)) {\n        delete response[parent][child];\n      } else if (!child) {\n        response[parent] = {};\n      } else {\n        response[parent][child] = null;\n      }\n    }\n\n    this.props.onQuestionAnswered(this.props.question.number, response);\n    this.props.resetButtons();\n  }\n\n  generateChildren(optionsAlias, parent) {\n    let children = <div/>;\n    if (this.props.response && this.props.response.hasOwnProperty(parent)) {\n      children = optionsAlias[parent].map((child) => {\n        let control;\n        if (new RegExp(\"Other.*\").test(child)) {\n          control = (<div className=\"child\">\n            {child} <input type=\"text\"\n                           name={child}\n                           key={parent + \".\" + child}\n                           value={this.props.response[parent][child]}\n                           onChange={(e) =>\n                               this.handleSingleThenMultiple(parent, child, e)}/>\n             <br/>\n             </div>);\n        }\n        else {\n          control = (<div className=\"child\">\n            <input type=\"checkbox\"\n                   name={child}\n                   key={parent + \".\" + child}\n                   checked={this.props.response && this.props.response[parent].hasOwnProperty(child)}\n                   onChange={(e) =>\n                       this.handleSingleThenMultiple(parent, child, e)}/> {child}\n          <br/>\n          </div>);\n        }\n        return control;\n      });\n    }\n    return children;\n  }\n\n  generateInputOptions(validationError) {\n    let inputOptions = <div/>;\n    let responseType = this.props.question.questionForPatient.responseType;\n    if (responseType === \"DATE_PICKER_OPTIONAL\") {\n      inputOptions = (\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            <DatePicker className=\"datePicker\"\n                        placeholderText={this.props.labels[responseType].empty}\n                        maxDate={new Date()}\n                        isClearable\n                        selected={this.props.response}\n                        onChange={this.handleDatePickerChange}/>\n          </div>\n      );\n    } else if (responseType === \"SINGLE_SELECTION\") {\n      inputOptions = this.props.question.questionForPatient.options.map((option) =>\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            <input type=\"radio\"\n                   name={option}\n                   key={option}\n                   checked={this.props.response === option}\n                   onChange={this.handleSingleSelection}/> {option}\n          </div>\n      );\n    } else if (responseType === \"MULTIPLE_SELECTION\") {\n      inputOptions = this.props.question.questionForPatient.options.map((option) =>\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            <input type=\"checkbox\"\n                   name={option}\n                   key={option}\n                   checked={this.props.response && this.props.response.includes(option)}\n                   onChange={this.handleMultipleSelection}/> {option}\n          </div>\n      );\n    } else if (responseType === \"SINGLE_SELECTION_THEN_MULTIPLE_SELECTION\") {\n      const optionsAlias = this.props.question.questionForPatient.options;\n\n      inputOptions = Object.keys(optionsAlias).map((option) =>\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            <input type=\"radio\"\n                   name={option}\n                   key={option}\n                   checked={this.props.response && this.props.response.hasOwnProperty(option)}\n                   onChange={(e) =>\n                       this.handleSingleThenMultiple(option, null, e)}/> {option}\n            <br/>\n            {this.generateChildren(optionsAlias, option)}\n          </div>\n      );\n    } else if (responseType === \"ENTRY\") {\n      inputOptions = this.props.question.questionForPatient.options.map((option) =>\n          <div className={\"parent \" +  (validationError ? \"validationError\" : \"\")}>\n            {option} <input type=\"text\"\n                   name={option}\n                   key={option}\n                   value={this.props.response ? (this.props.response[option] || \"\") : \"\"}\n                   onChange={(e) =>\n                       this.handleEntry(option, e)} />\n          </div>\n      );\n    }\n    return <div className=\"inputOptions\">{inputOptions}</div>;\n  }\n\n  render() {\n    return (\n        <div>\n          <div className=\"questionText\">{this.props.question.questionForPatient.question}</div>\n          {this.generateInputOptions(this.props.validationError)}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}